)]}'
{"version":3,"file":"/packages/spiderable.js","sources":["spiderable/spiderable.js","spiderable/spiderable_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gB;;;;;;;;;;;;;;;;;;;;ACAA,2E;AACA,wE;AACA,E;AACA,sB;AACA,mE;AACA,+E;AACA,uE;AACA,gC;AACA,E;AACA,0E;AACA,0E;AACA,Y;AACA,E;AACA,2F;AACA,iF;AACA,mD;;AAEA,gD;;AAEA,wC;AACA,iD;AACA,E;;AAEA,mD;AACA,oC;AACA,sF;AACA,gE;AACA,E;;AAEA,oD","sourcesContent":["Spiderable = {};\n\n","// We want to provide a deteriministic indicator of when the page is 'done'\n// This is non-trivial: e.g. an infinite stream of tweets is never done.\n//\n// We do this instead:\n//   We are done sometime after all initial subscriptions are ready\n//   Initial subscriptions are those started in the top-level script execution,\n//   or from a Meteor.startup callback when Meteor.startup is called in\n//   top-level script execution.\n//\n// Note that we don't guarantee that we won't wait longer than we have to;\n// extra subscriptions may be made, and extra data past the minimum may be\n// received.\n//\n// We set this 'started' flag as Package.spiderable.Spiderable._initialSubscriptionsStarted\n// This is used by our phantomjs to determine when the subscriptions are started;\n// it then polls until all subscriptions are ready.\n\nSpiderable._initialSubscriptionsStarted = false;\n\nvar startupCallbacksDone = function () {\n  Spiderable._initialSubscriptionsStarted = true;\n};\n\n// This extra indirection is how we get called last\nvar topLevelCodeDone = function () {\n  // We'd like to use Meteor.startup here I think, but docs/behaviour of that is wrong\n  Meteor._setImmediate(function () { startupCallbacksDone(); });\n};\n\nMeteor.startup(function () { topLevelCodeDone(); });\n"]}